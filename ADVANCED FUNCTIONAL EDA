{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2879186,"sourceType":"datasetVersion","datasetId":826163}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kursatdinc/advanced-functional-eda?scriptVersionId=178995029\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# **ADVANCED FUNCTIONAL EDA**\n\n1. General Check of DataFrame\n1. Capturing Variables and Generalizing Operations\n1. Analysis of Categorical Variables\n1. Analysis of Numerical Variables\n1. Analysis of Target Variable\n1. Analysis of Correlation","metadata":{}},{"cell_type":"markdown","source":"#### **IMPORTINGS**","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nimport warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:53:36.927954Z","iopub.execute_input":"2024-05-21T17:53:36.928358Z","iopub.status.idle":"2024-05-21T17:53:38.059543Z","shell.execute_reply.started":"2024-05-21T17:53:36.928329Z","shell.execute_reply":"2024-05-21T17:53:38.058305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### **SAMPLE DATA FRAME**","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/test-file/tested.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:53:41.455282Z","iopub.execute_input":"2024-05-21T17:53:41.455804Z","iopub.status.idle":"2024-05-21T17:53:41.501927Z","shell.execute_reply.started":"2024-05-21T17:53:41.455769Z","shell.execute_reply":"2024-05-21T17:53:41.500127Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### **GENERAL CHECK OF DATAFRAME**","metadata":{}},{"cell_type":"code","source":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.describe([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:53:44.269483Z","iopub.execute_input":"2024-05-21T17:53:44.270037Z","iopub.status.idle":"2024-05-21T17:53:44.282774Z","shell.execute_reply.started":"2024-05-21T17:53:44.269987Z","shell.execute_reply":"2024-05-21T17:53:44.278563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**EXAMPLE**","metadata":{}},{"cell_type":"code","source":"check_df(df, head=10)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:53:47.131661Z","iopub.execute_input":"2024-05-21T17:53:47.132054Z","iopub.status.idle":"2024-05-21T17:53:47.17602Z","shell.execute_reply.started":"2024-05-21T17:53:47.132025Z","shell.execute_reply":"2024-05-21T17:53:47.174764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### **CAPTURING VARIABLES & GENERALIZING OPERATIONS**","metadata":{}},{"cell_type":"code","source":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n\n    Veri setindeki kategorik, numerik ve kategorik fakat kardinal değişkenlerin isimlerini verir.\n    Not: Kategorik değişkenlerin içerisine numerik görünümlü kategorik değişkenler de dahildir.\n\n    Parameters\n    ------\n        dataframe: dataframe\n                Değişken isimleri alınmak istenilen dataframe\n        cat_th: int, optional\n                numerik fakat kategorik olan değişkenler için sınıf eşik değeri\n        car_th: int, optinal\n                kategorik fakat kardinal değişkenler için sınıf eşik değeri\n\n    Returns\n    ------\n        cat_cols: list\n                Kategorik değişken listesi\n        num_cols: list\n                Numerik değişken listesi\n        cat_but_car: list\n                Kategorik görünümlü kardinal değişken listesi\n\n    Examples\n    ------\n        import seaborn as sns\n        df = sns.load_dataset(\"iris\")\n        print(grab_col_names(df))\n\n\n    Notes\n    ------\n        cat_cols + num_cols + cat_but_car = toplam değişken sayısı\n        num_but_cat cat_cols'un içerisinde.\n        Return olan 3 liste toplamı toplam değişken sayısına eşittir: cat_cols + num_cols + cat_but_car = değişken sayısı\n\n    \"\"\"\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    \n    return cat_cols, num_cols, cat_but_car","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:53:57.906134Z","iopub.execute_input":"2024-05-21T17:53:57.906612Z","iopub.status.idle":"2024-05-21T17:53:57.918041Z","shell.execute_reply.started":"2024-05-21T17:53:57.906579Z","shell.execute_reply":"2024-05-21T17:53:57.91645Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**EXAMPLE**","metadata":{}},{"cell_type":"code","source":"grab_col_names(df, cat_th=10, car_th=20)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:54:27.815501Z","iopub.execute_input":"2024-05-21T17:54:27.815946Z","iopub.status.idle":"2024-05-21T17:54:27.829533Z","shell.execute_reply.started":"2024-05-21T17:54:27.815905Z","shell.execute_reply":"2024-05-21T17:54:27.82859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:54:29.836649Z","iopub.execute_input":"2024-05-21T17:54:29.837368Z","iopub.status.idle":"2024-05-21T17:54:29.850924Z","shell.execute_reply.started":"2024-05-21T17:54:29.837328Z","shell.execute_reply":"2024-05-21T17:54:29.849258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### **ANALYSIS OF CATEGORICAL VARIABLES**","metadata":{}},{"cell_type":"code","source":"def cat_summary(dataframe, col_name, plot=False):\n\n    if dataframe[col_name].dtypes == \"bool\":\n        dataframe[col_name] = dataframe[col_name].astype(int)\n\n        print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                            \"Ratio\": 100 * dataframe[col_name].value_counts() / len(dataframe)}))\n        print(\"##########################################\")\n\n        if plot:\n            fig, axs = plt.subplots(1, 2, figsize=(8, 6))\n\n            plt.subplot(1, 2, 1)\n            sns.countplot(x=dataframe[col_name], data=dataframe)\n            plt.title(\"Frequency of \" + col_name)\n            plt.xticks(rotation=90)\n\n            plt.subplot(1, 2, 2)\n            values = dataframe[col_name].value_counts()\n            plt.pie(x=values, labels=values.index, autopct=lambda p: '{:.2f}% ({:.0f})'.format(p, p/100 * sum(values)))\n            plt.title(\"Frequency of \" + col_name)\n            plt.legend(labels=['{} - {:.2f}%'.format(index, value/sum(values)*100) for index, value in zip(values.index, values)],\n                    loc='upper center', bbox_to_anchor=(0.5, -0.2), fancybox=True, shadow=True, ncol=1)\n            plt.show(block=True)\n    else:\n        print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                            \"Ratio\": 100 * dataframe[col_name].value_counts() / len(dataframe)}))\n        print(\"##########################################\")\n\n        if plot:\n            fig, axs = plt.subplots(1, 2, figsize=(8, 6))\n            \n            plt.subplot(1, 2, 1)\n            sns.countplot(x=dataframe[col_name], data=dataframe)\n            plt.title(\"Frequency of \" + col_name)\n            plt.xticks(rotation=90)\n\n            plt.subplot(1, 2, 2)\n            values = dataframe[col_name].value_counts()\n            plt.pie(x=values, labels=values.index, autopct=lambda p: '{:.2f}% ({:.0f})'.format(p, p/100 * sum(values)))\n            plt.title(\"Frequency of \" + col_name)\n            plt.legend(labels=['{} - {:.2f}%'.format(index, value/sum(values)*100) for index, value in zip(values.index, values)],\n                    loc='upper center', bbox_to_anchor=(0.5, -0.2), fancybox=True, shadow=True, ncol=1)\n            plt.show(block=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:55:38.516374Z","iopub.execute_input":"2024-05-21T17:55:38.516839Z","iopub.status.idle":"2024-05-21T17:55:38.53309Z","shell.execute_reply.started":"2024-05-21T17:55:38.516809Z","shell.execute_reply":"2024-05-21T17:55:38.531527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**EXAMPLE**","metadata":{}},{"cell_type":"code","source":"cat_summary(df, \"Embarked\", plot=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:55:53.395286Z","iopub.execute_input":"2024-05-21T17:55:53.395726Z","iopub.status.idle":"2024-05-21T17:55:53.79968Z","shell.execute_reply.started":"2024-05-21T17:55:53.395694Z","shell.execute_reply":"2024-05-21T17:55:53.79838Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### **ANALYSIS OF NUMERICAL VARIABLES**","metadata":{}},{"cell_type":"code","source":"def num_summary(dataframe, numerical_col, plot=False, hist_bins=20):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        fig, axs = plt.subplots(2, 2, figsize=(12, 10))\n        \n        # Histogram\n        plt.subplot(2, 2, 1)\n        dataframe[numerical_col].hist(bins=hist_bins)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col + ' Distribution')\n        \n        # Boxplot\n        plt.subplot(2, 2, 2)\n        sns.boxplot(y=numerical_col, data=dataframe)\n        plt.title(\"Boxplot of \" + numerical_col)\n        plt.xticks(rotation=90)\n        \n        # Density Plot\n        plt.subplot(2, 2, 3)\n        sns.kdeplot(dataframe[numerical_col], shade=True)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col + ' Density')\n        \n        # QQ Plot\n        plt.subplot(2, 2, 4)\n        stats.probplot(dataframe[numerical_col], dist=\"norm\", plot=plt)\n        plt.title(numerical_col + ' QQ Plot')\n        \n        plt.tight_layout()\n        plt.show(block=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:55:56.62552Z","iopub.execute_input":"2024-05-21T17:55:56.626545Z","iopub.status.idle":"2024-05-21T17:55:56.637337Z","shell.execute_reply.started":"2024-05-21T17:55:56.626495Z","shell.execute_reply":"2024-05-21T17:55:56.636047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**EXAMPLE**","metadata":{}},{"cell_type":"code","source":"num_summary(df, \"Fare\", plot=True, hist_bins=30)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:56:06.032031Z","iopub.execute_input":"2024-05-21T17:56:06.032447Z","iopub.status.idle":"2024-05-21T17:56:07.177929Z","shell.execute_reply.started":"2024-05-21T17:56:06.032413Z","shell.execute_reply":"2024-05-21T17:56:07.1767Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### **ANALYSIS OF TARGET VARIABLE**","metadata":{}},{"cell_type":"code","source":"def target_summary_with_cat(dataframe, target, categorical_col):\n    \"\"\"\n\n        Veri setindeki Target colonunu, girilen kategorik colona gore gruplayip\n            - mean\n            - count\n            - ratio\n        sonuclarini ekrana yazdirir.\n\n        Parameters\n        ------\n            dataframe: dataframe\n                    Target ve Kategorik kolonlarin bulundugu dataframe\n            target: str\n                    Sonucun getirilecegi hedef degisken\n            categorical_col: str\n                    Gruplanmak istenen kategorik kolon\n\n        Returns\n        ------\n            None\n\n        Examples\n        ------\n            import pandas as pd\n            in:\n            df = pd.DataFrame({'Animal': ['Falcon', 'Falcon', 'Falcon',\n                                          'Parrot', 'Parrot'],\n                               'Max Speed': [310, 330, 340, 24, 28]})\n\n            in:\n            df\n            out:\n              Animal   Max Speed\n            0  Falcon  310\n            1  Falcon  330\n            2  Falcon  340\n            3  Parrot   24\n            4  Parrot   28\n\n            in: target_summary_with_cat_extended(df, 'Max Speed', 'Animal')\n            out:\n                    TARGET_MEAN  TARGET_CCOUNT  RATIO\n            Animal\n            Falcon 326.6667      3             60.0000\n            Parrot  26.0000      2             40.0000\n\n        Notes\n        ------\n            None\n\n        \"\"\"\n\n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean(),\n                        \"TARGET_COUNT\": dataframe.groupby(categorical_col)[target].count(),\n                        \"RATIO\": 100 * dataframe[categorical_col].value_counts() / len(dataframe)}), end=\"\\n\\n\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:56:47.53214Z","iopub.execute_input":"2024-05-21T17:56:47.532586Z","iopub.status.idle":"2024-05-21T17:56:47.541631Z","shell.execute_reply.started":"2024-05-21T17:56:47.532554Z","shell.execute_reply":"2024-05-21T17:56:47.53989Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**EXAMPLE**","metadata":{}},{"cell_type":"code","source":"target_summary_with_cat(df, \"Survived\", \"Embarked\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:58:23.221262Z","iopub.execute_input":"2024-05-21T17:58:23.22231Z","iopub.status.idle":"2024-05-21T17:58:23.239541Z","shell.execute_reply.started":"2024-05-21T17:58:23.222268Z","shell.execute_reply":"2024-05-21T17:58:23.237709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:58:55.947293Z","iopub.execute_input":"2024-05-21T17:58:55.948125Z","iopub.status.idle":"2024-05-21T17:58:55.955404Z","shell.execute_reply.started":"2024-05-21T17:58:55.948069Z","shell.execute_reply":"2024-05-21T17:58:55.95393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**EXAMPLE**","metadata":{}},{"cell_type":"code","source":"target_summary_with_num(df, \"Survived\", \"Fare\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:58:57.631906Z","iopub.execute_input":"2024-05-21T17:58:57.632372Z","iopub.status.idle":"2024-05-21T17:58:57.644213Z","shell.execute_reply.started":"2024-05-21T17:58:57.632339Z","shell.execute_reply":"2024-05-21T17:58:57.642464Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"#### **ANALYSIS OF CORRELATION**","metadata":{}},{"cell_type":"code","source":"def high_correlated_cols(dataframe, plot=False, corr_th=0.90):\n    corr = dataframe.corr(numeric_only=True)\n    cor_matrix = corr.abs()\n    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(bool))\n    drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > corr_th)]\n    if plot:\n        import seaborn as sns\n        import matplotlib.pyplot as plt\n        sns.set_theme(rc={'figure.figsize': (15, 15)})\n        sns.heatmap(corr, cmap=\"RdBu\")\n        plt.show()\n    return drop_list","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-21T18:02:04.496656Z","iopub.execute_input":"2024-05-21T18:02:04.497873Z","iopub.status.idle":"2024-05-21T18:02:04.506278Z","shell.execute_reply.started":"2024-05-21T18:02:04.497831Z","shell.execute_reply":"2024-05-21T18:02:04.504751Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**EXAMPLE**","metadata":{}},{"cell_type":"code","source":"high_correlated_cols(df, plot=True, corr_th=0.90)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T18:02:06.785461Z","iopub.execute_input":"2024-05-21T18:02:06.786293Z","iopub.status.idle":"2024-05-21T18:02:07.330099Z","shell.execute_reply.started":"2024-05-21T18:02:06.786251Z","shell.execute_reply":"2024-05-21T18:02:07.328236Z"},"trusted":true},"execution_count":null,"outputs":[]}]}